// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?        @map("email_verified")
  image           String?
  accounts        Account[]
  UserInformation UserInformation?
  Teams           Team[]
  TeamMember      TeamMember[]
  Projects        Project[]
  ProjectMember   ProjectMember[]

  @@map("users")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model UserInformation {
  userId    Int       @unique @map("user_id")
  userPid   String    @unique
  username  String    @unique
  avatarUrl String?   @map("avatar_url")
  name      String?
  birthDate DateTime? @map("birth_date")
  location  String?
  bio       String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          Int          @id @default(autoincrement())
  teamPid     String       @unique
  name        String
  inviteToken String       @unique @default(nanoid(10))
  creatorId   Int
  creator     User         @relation(fields: [creatorId], references: [id])
  TeamMembers TeamMember[]
  Projects    Project[]

  @@map("teams")
}

model TeamMember {
  teamId Int
  userId Int
  user   User @relation(fields: [userId], references: [id])
  team   Team @relation(fields: [teamId], references: [id])

  @@unique([teamId, userId])
}

model Project {
  id            Int             @id @default(autoincrement())
  projectPid    String          @unique
  title         String
  teamPid       String
  team          Team            @relation(fields: [teamPid], references: [teamPid], onDelete: Cascade)
  createdById   Int
  creator       User            @relation(fields: [createdById], references: [id])
  Column        Column[]
  ProjectMember ProjectMember[]

  @@map("projects")
}

model ProjectMember {
  projectId Int
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([projectId, userId])
}

model Column {
  id         Int     @id @default(autoincrement())
  columnPid  String  @unique @default(nanoid())
  title      String  @unique
  index      Int     @default(autoincrement())
  projectPid String
  project    Project @relation(fields: [projectPid], references: [projectPid], onDelete: Cascade)
  Task       Task[]
}

model Task {
  id        Int    @id @default(autoincrement())
  taskPid   String @unique @default(nanoid())
  title     String
  index     Int    @default(autoincrement())
  columnPid String
  column    Column @relation(fields: [columnPid], references: [columnPid], onDelete: Cascade)
}
